// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_nasa_apod/test/src/features/apod/domain/usecases/manage_favorites_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_nasa_apod/src/core/erros/failures.dart' as _i5;
import 'package:flutter_nasa_apod/src/features/apod/domain/entities/apod.dart'
    as _i6;
import 'package:flutter_nasa_apod/src/features/apod/domain/repositories/apod_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApodRepository extends _i1.Mock implements _i3.ApodRepository {
  MockApodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Apod>> getApodByDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getApodByDate,
          [date],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Apod>>.value(
            _FakeEither_0<_i5.Failure, _i6.Apod>(
          this,
          Invocation.method(
            #getApodByDate,
            [date],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Apod>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveFavorite(_i6.Apod? apod) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFavorite,
          [apod],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #saveFavorite,
            [apod],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> removeFavorite(_i6.Apod? apod) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [apod],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #removeFavorite,
            [apod],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Apod>>> getFavorites() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Apod>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Apod>>(
          this,
          Invocation.method(
            #getFavorites,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Apod>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isFavorite(_i6.Apod? apod) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFavorite,
          [apod],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isFavorite,
            [apod],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
